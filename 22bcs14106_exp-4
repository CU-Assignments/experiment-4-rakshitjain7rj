import java.util.*;

// Demonstration of ArrayList, LinkedList, HashMap, TreeMap, HashSet
public class CollectionsDemo {
    public static void main(String[] args) {
        // ArrayList Example
        ArrayList<String> arrayList = new ArrayList<>();
        arrayList.add("Apple");
        arrayList.add("Banana");
        arrayList.add("Cherry");
        System.out.println("ArrayList: " + arrayList);

        // LinkedList Example
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.add("Dog");
        linkedList.add("Elephant");
        linkedList.add("Fox");
        System.out.println("LinkedList: " + linkedList);

        // HashMap Example
        HashMap<Integer, String> hashMap = new HashMap<>();
        hashMap.put(1, "One");
        hashMap.put(2, "Two");
        hashMap.put(3, "Three");
        System.out.println("HashMap: " + hashMap);

        // TreeMap Example
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(3, "Three");
        treeMap.put(1, "One");
        treeMap.put(2, "Two");
        System.out.println("TreeMap (Sorted by Key): " + treeMap);

        // HashSet Example
        HashSet<String> hashSet = new HashSet<>();
        hashSet.add("Red");
        hashSet.add("Green");
        hashSet.add("Blue");
        System.out.println("HashSet: " + hashSet);
    }
}

// Multithreading Example
class MultithreadingDemo extends Thread {
    private String threadName;

    MultithreadingDemo(String name) {
        threadName = name;
    }

    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.println(threadName + " is running, iteration: " + i);
            try {
                Thread.sleep(500); // Sleep for 500 milliseconds
            } catch (InterruptedException e) {
                System.out.println(threadName + " interrupted.");
            }
        }
        System.out.println(threadName + " finished.");
    }
}

public class MultithreadingExample {
    public static void main(String[] args) {
        // Create threads
        MultithreadingDemo thread1 = new MultithreadingDemo("Thread-1");
        MultithreadingDemo thread2 = new MultithreadingDemo("Thread-2");

        // Set thread priority
        thread1.setPriority(Thread.MAX_PRIORITY);
        thread2.setPriority(Thread.MIN_PRIORITY);

        // Start threads
        thread1.start();
        thread2.start();

        // Thread Synchronization Example
        Counter counter = new Counter();
        Thread syncThread1 = new Thread(new SyncThread(counter, "SyncThread-1"));
        Thread syncThread2 = new Thread(new SyncThread(counter, "SyncThread-2"));
        syncThread1.start();
        syncThread2.start();
    }
}

// Counter class with synchronized method\class Counter {
    private int count = 0;

    // Synchronized method to ensure thread-safe increment
    public synchronized void increment() {
        count++;
        System.out.println("Count after increment: " + count);
    }
}

class SyncThread implements Runnable {
    private Counter counter;
    private String threadName;

    SyncThread(Counter counter, String name) {
        this.counter = counter;
        this.threadName = name;
    }

    public void run() {
        for (int i = 0; i < 5; i++) {
            System.out.println(threadName + " incrementing count.");
            counter.increment();
            try {
                Thread.sleep(400);
            } catch (InterruptedException e) {
                System.out.println(threadName + " interrupted.");
            }
        }
    }
}
